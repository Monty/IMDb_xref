#!/usr/bin/env bash
#
# Internal function: Print tsv rows with optional column value highlighting

function tsvPrint() {
    local OPTIND columnNum noHighlighting tsvFile searchFile

    help() {
        cat <<EOF
tsvPrint -- Internal function: Print tsv rows with optional highlighted column.

The tsv file should already be sorted. This function doesn't do any sorting.

Typical tsv rows printed with tsvPrint:
    tt2802850  tvSeries  Fargo         Fargo         2014
    tt3747572  tvSeries  Grantchester  Grantchester  2014

To highlight Fargo and Grantchester, save column 3 as a file used by rg -f to
find every value in column 3.

USAGE:
    tsvPrint [OPTIONS...] TSV_FILE

OPTIONS:
    -h      Print this message.
    -c      Column - column with values to highlight. Defaults to column 3.
    -n      No highlighting

EXAMPLES:
    tsvPrint "$ALL_MATCHES"
    tsvPrint -c 2 "$FINAL_RESULTS"
    tsvPrint -n "$POSSIBLE_MATCHES"
EOF
    }

    while getopts ":hc:n" opt; do
        case $opt in
        h)
            help
            waitUntil -k
            return
            ;;
        c)
            columnNum="$OPTARG"
            ;;
        n)
            noHighlighting="yes"
            ;;
        \?)
            printf "\n==> [${YELLOW}Warning${NO_COLOR}] Invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: " >&2
            printf "${YELLOW}$0>tsvPrint${NO_COLOR}.\n" >&2
            ;;
        :)
            printf "\n==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0>tsvPrint${NO_COLOR} requires an argument.\n" >&2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    columnNum="${columnNum}"
    tsvFile="$1"

    if [ -z "$tsvFile" ]; then
        printf "\n==> [${RED}Error${NO_COLOR}] ${RED}$0>tsvPrint${NO_COLOR} " >&2
        printf "requires a filename argument.\n" >&2
        exit 1
    fi

    if [ -n "$noHighlighting" ]; then
        if checkForExecutable -q xsv && [ -z "$NO_XSV" ]; then
            xsv table -d "\t" "$tsvFile"
        else
            PFMT="$(awk -F "\t" -f elastic_tabs.awk "$tsvFile")"
            # Works for up to 9 fields. Unicode chars can throw off column width
            awk -F '\t' -v PF="$PFMT" '{printf(PF,$1,$2,$3,$4,$5,$6,$7,$8,$9)}' "$tsvFile"
        fi
    else
        # Use searchFile for highlighting
        searchFile=$(mktemp)
        cut -f "${columnNum:-3}" "$tsvFile" | sed 's+[()?]+\\&+g' >"$searchFile"
        if checkForExecutable -q xsv && [ -z "$NO_XSV" ]; then
            xsv table -d "\t" "$tsvFile" | rg --color always -f "$searchFile"
        else
            PFMT="$(awk -F "\t" -f elastic_tabs.awk "$tsvFile")"
            # Works for up to 9 fields. Unicode chars can throw off column width
            awk -F '\t' -v PF="$PFMT" '{printf(PF,$1,$2,$3,$4,$5,$6,$7,$8,$9)}' "$tsvFile" |
                rg --color always -f "$searchFile"
        fi
        rm -f "$searchFile"
    fi
}
