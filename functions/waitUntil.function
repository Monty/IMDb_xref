#!/usr/bin/env bash
#
# General-purpose function to ask Yes/No questions in Bash, or simply prompt and
# then wait for any keystroke. It has default prompts, but can take an optional
# prompt string.
#
# Y or N questions can set a default answer. It keeps repeating the question
# until it gets a valid answer.
#
# Normally it reads a single character and looks for y, Y, n, N, or <cr>
#
# With the -l switch, it also accepts longer answers, e.g. "yes" or "no"
# followed by <cr> Surprisingly "yellow" will also work as only the first
# character is checked.
#
# Calling this function instead of using "read -p" enables changing all default
# prompts in this one function. The -k switch eliminates the need for a
# preceding "clear". If you want to wait for a keystroke but don't want any
# prompt, just use "read -n 1 -s"

function waitUntil() {
    local OPTIND clearFirst longRead yesno default anyKey reply

    help() {
        cat <<EOF
waitUntil -- General-purpose: Ask Yes/No questions, or wait for any key, with optional prompt.

USAGE:
    waitUntil [OPTIONS...] [PROMPT_STRING]

OPTIONS:
    -h      Print this message.
    -c      Clear screen before prompting.
    -l      Allow longer answer, i.e. "yes" or "no" followed by <cr>
    -s      Allow shorter answer, i.e. a single "y" or "n"
    -k      Wait for any keystroke. Overrides -l switch.
    -N      Default to N if a <cr> is the first character typed.
    -Y      Default to Y if a <cr> is the first character typed.

EXAMPLES:
    waitUntil
    waitUntil -k
    waitUntil -kc
    waitUntil -Y
    waitUntil -l "<prompt>'
    waitUntil -s "<prompt>'
    waitUntil -cY "<prompt>'
    waitUntil -lN "<prompt>'

    For more examples see: tests/test-waitUntil.sh

EOF
    }

    while getopts ":hclksNY" opt; do
        case $opt in
        h)
            help
            read -r -n 1 -s -p "Hit any key to continue, '^C' to quit. "
            printf "\n"
            return
            ;;
        c)
            clearFirst="yes"
            ;;
        l)
            longRead="yes"
            ;;
        s)
            longRead=
            ;;
        k)
            anyKey="yes"
            ;;
        N)
            yesno="[y/N] "
            default="N"
            ;;
        Y)
            yesno="[Y/n] "
            default="Y"
            ;;
        \?)
            printf "\n==> [${YELLOW}Warning${NO_COLOR}] Invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: " >&2
            printf "${YELLOW}$0>waitUntil${NO_COLOR}.\n" >&2
            ;;
        :)
            printf "\n==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0>waitUntil${NO_COLOR} requires an argument.\n" >&2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    # If we only want to wait for any key to be hit...
    # Print a blank line before the prompt, and after the key is hit
    if [[ -n $anyKey ]]; then
        printf "\n" >&2
        [[ -n $clearFirst ]] && clear
        # printf doesn't work correctly with "alternative" in second field
        # shellcheck disable=SC2059      # printf breaks otherwise
        printf "${1:-Hit any key to continue, '^C' to quit.} " >&2
        read -r -n 1 -s </dev/tty
        printf "\n" >&2
        return
    fi

    # Now we want a yes or no answer...
    # Don't print a blank line before or after
    [[ -z $yesno ]] && yesno="[y/n] "

    while true; do
        # Ask the question (not using "read -p" as it uses stderr not stdout)
        [[ -n $clearFirst ]] && clear
        printf "${1:-Does that look correct?} %s" "$yesno" >&2
        #
        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        if [[ -n $longRead ]]; then
            read -r reply </dev/tty
        else
            read -r -n 1 -s reply </dev/tty
            [[ -z $reply ]] || [[ ${#reply} != 0 ]] && printf "\n" >&2
        fi
        #
        # If no reply, use the default if it exists
        if [[ -z $reply ]]; then
            reply="$default"
        fi
        #
        case "$reply" in
        Y* | y*)
            return 0
            ;;
        N* | n*)
            return 1
            ;;
        esac
    done
}
