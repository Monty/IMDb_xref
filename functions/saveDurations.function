#!/usr/bin/env bash
#
# Internal function: Save the duration of scriptName in .xref_durations
#
# Duration files are tab separated -- used to record script durations for predictions and stats
#
#     Script Name         Timestamp              Date String             Duration
# generateXrefData.sh   201210.202416   Thu Dec 10 20:24:16 PST 2020    16 seconds.
#
# Timestamp and Date String are the same time, Timestamp for sorting. Date String for humans.

function saveDurations() {
    local OPTIND scriptName secs date_fmt date_str timestamp mins duration

    help() {
        cat <<EOF
saveDurations -- Internal function: Save the duration of a script in seconds.

Save the duration so that printDuration can be used to inform the user of the
predicted duration of a long running process, .e.g. downloading all IMDb .gz
files.

USAGE:
    saveDurations [OPTIONS...] \$SECONDS

OPTIONS:
    -h      Print this message.

EXAMPLES:
    SECONDS=0
    # Execute something that takes a while, and isn't expected to vary much in duration.
    saveDurations \$SECONDS
EOF
    }

    while getopts ":h" opt; do
        case $opt in
        h)
            help
            waitUntil -k
            return
            ;;
        \?)
            printf "\n==> [${YELLOW}Warning${NO_COLOR}] Invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: " >&2
            printf "${YELLOW}$0>saveDurations${NO_COLOR}.\n" >&2
            ;;
        :)
            printf "\n==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0>saveDurations${NO_COLOR} requires an argument.\n" >&2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    scriptName="$(basename "$0")"
    secs="$1"

    if [[ -z $secs ]]; then
        printf "\n==> [${RED}Error${NO_COLOR}] ${RED}$0>saveDurations${NO_COLOR} " >&2
        printf "requires a \"\$SECONDS\" argument.\n" >&2
        exit 1
    fi

    # The date & time this function ran
    date_fmt="%y%m%d.%H%M%S"
    date_str=$(date)
    timestamp=$(date +"$date_fmt")
    #
    mins="minute"
    [[ $secs -ge 120 ]] && mins="minutes"
    if [[ $secs -gt 90 ]]; then
        duration="$((secs / 60)) $mins and $((secs % 60)) seconds."
    else
        duration="$secs seconds."
    fi
    #
    # Save this info for later
    # shellcheck disable=SC2154      # durationFile is defined
    printf "%s\t%s\t%s\t%s\n" "$scriptName" "$timestamp" "$date_str" \
        "$duration" >>"$durationFile"
}
