#!/usr/bin/env bash
#
# General-purpose function to check that there is an executable version of a command.
#
# Print standard error message and exit unless -q is specified

function checkForExecutable() {
    local OPTIND quietly exeName

    help() {
        cat <<EOF
checkForExecutable -- General-purpose: Check for an executable version of a command.

USAGE:
    checkForExecutable [OPTIONS...] COMMAND

OPTIONS:
    -h      Print this message.
    -q      Quiet - don't print fail/retry message. 'return 1' instead of 'exit 1'.

EXAMPLES:
    checkForExecutable curl
    checkForExecutable -q curl

# If you want to handle failures yourself...
if checkForExecutable -q curl; then
    # code to run if the executable is available.
else
    # code to run if the executable is missing.
fi
EOF
    }

    while getopts ":hq" opt; do
        case $opt in
        h)
            help
            waitUntil -k
            return
            ;;
        q)
            quietly="yes"
            ;;
        \?)
            printf "\n==> [${YELLOW}Warning${NO_COLOR}] Invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: " >&2
            printf "${YELLOW}$0>checkForExecutable${NO_COLOR}.\n" >&2
            ;;
        :)
            printf "\n==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0>checkForExecutable${NO_COLOR} requires an argument.\n" >&2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    exeName="$1"

    # Make sure we can execute exeName.
    if ! type -p "$exeName" >/dev/null; then
        if [[ -z $quietly ]]; then
            printf "==> [${RED}Error${NO_COLOR}] Can't run ${RED}$exeName${NO_COLOR}. " >&2
            printf "Please install ${RED}$exeName${NO_COLOR}, then re-run this script.\n\n" >&2
            exit 1
        fi
        return 1
    fi
}
