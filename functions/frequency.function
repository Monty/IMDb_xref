#!/usr/bin/env bash
#
# General-purpose function equivalent to sort | uniq -c | sort -nr
#
# Works without having to sort its input. Formats the output better than uniq -c

function frequency() {
    local OPTIND fieldwidth fmt_str tab_separated

    help() {
        cat <<EOF
frequency -- General-purpose: Print frequency of occurrence of unique strings.
             Equivalent to 'sort | uniq -c | sort -nr'
             or 'sort | uniq -c | sort' if the -s option is supplied.

Works without having to sort its input. Formats the output better than uniq -c

USAGE:
    frequency [OPTIONS...]

OPTIONS:
    -h      Print this message.
    -w      Set fieldwidth - defaults to 8 if not specified.
    -s      Sort by result value, not frequency.
    -t      Tab - create two tab separated fields. Ignore fieldwidth.

EXAMPLES:
    cut -f 1 file | frequency
    cut -f 6 file | frequency -w 5
    cut -f 4 file | frequency -s
    cut -f 2 file | frequency -t

    Given:
       actor
       director
       director
       actor
       director

    Return:
       3 director
       2 actor

    Return: (if -s)
       2 actor
       3 director
EOF
    }

    while getopts ":hstw:" opt; do
        case $opt in
        h)
            help
            waitUntil -k
            return
            ;;
        s)
            sort_by_value="yes"
            tab_separated="yes"
            ;;
        t)
            tab_separated="yes"
            ;;
        w)
            fieldwidth="$OPTARG"
            ;;
        \?)
            printf "\n==> [${YELLOW}Warning${NO_COLOR}] Invalid " >&2
            printf "${YELLOW}-$OPTARG${NO_COLOR} option in: " >&2
            printf "${YELLOW}$0>frequency${NO_COLOR}.\n" >&2
            ;;
        :)
            printf "\n==> [${RED}Error${NO_COLOR}] Option ${RED}-$OPTARG${NO_COLOR} " >&2
            printf "in: ${RED}$0>frequency${NO_COLOR} requires an argument.\n" >&2
            ;;
        esac
    done
    shift $((OPTIND - 1))

    # Default fieldwidth to 8
    fmt_str="%${fieldwidth:-8}s %s\n"
    [[ -n $tab_separated ]] && fmt_str="%s\t%s\n"
    if [[ -n $sort_by_value ]]; then
        awk -v FW="$fmt_str" \
            '{cnts[$0]+=1} END {for (c in cnts) printf (FW,cnts[c],c)}' |
            sort -f -t$'\t' --key=2
    else
        awk -v FW="$fmt_str" \
            '{cnts[$0]+=1} END {for (c in cnts) printf (FW,cnts[c],c)}' |
            sort -nr
    fi
}
